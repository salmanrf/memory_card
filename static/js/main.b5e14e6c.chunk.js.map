{"version":3,"sources":["components/board_handler.js","components/GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["fetchPokemon","url","a","fetch","pokemon","console","log","json","pokeData","generateRandoms","size","max","randoms","i","rand","rangedRandom","includes","push","range","random","Math","floor","CardPicker","props","randomPokes","id","map","pokeId","evaluateClicked","uniqid","PokeCard","useState","undefined","setPokemon","picked","setPicked","isMounted","setIsMounted","useEffect","pokeUrl","className","onClick","src","alt","name","pokeDetail","CardImage","CardInfo","types","toUpperCase","e","type","GameBoard","memory","setMemory","setRandomPokes","currentScore","setCurrentScore","localStorage","getItem","parseInt","topScore","setTopScore","setItem","length","current","collection","newRandoms","fromCollection","randomed","newBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5e14e6c.chunk.js","sourcesContent":["export async function fetchPokemon(url) {\n    let pokemon;\n\n    try {\n        pokemon = await fetch(url);\n    } \n    catch(error) {\n        console.log(error);\n        return null;\n    }\n\n    let pokeData = await pokemon.json();\n    \n    return pokeData;\n}\n\nexport function newBoard(memory, current) {\n    const collection = [...memory, ...current];\n    const newRandoms = [];\n\n    for(let i = 0; i < 8; i++) {\n        let fromCollection;\n        do {\n            fromCollection =  collection[rangedRandom(collection.length - 1, 100)];\n        } while(newRandoms.includes(fromCollection));\n        newRandoms.push(fromCollection);\n    }\n\n    for(let i = 0; i < 3; i++) {\n        let randomed;\n        do {\n            randomed =  rangedRandom(700, 1000);\n        } while(newRandoms.includes(randomed));\n        newRandoms[rangedRandom(7, 10)] = randomed;\n    }\n    \n    return newRandoms;\n}\n\nexport function generateRandoms(size, max) {\n    const randoms = [];\n    \n    for(let i = 0; i < size; i++) {\n        let rand;\n\n        do {\n            rand = rangedRandom(max, 1000);\n        } while(randoms.includes(rand))\n        \n        randoms.push(rand);\n    }\n\n    return randoms;\n}\n\nexport function rangedRandom(max, range) {\n    let random = Math.floor((Math.random() + 1) * range);\n    \n    if(random > max)\n        return random % (max + 1);\n    else \n        return random;\n}\n\n// babonize(4, 7);\n\n// function babonize(count, max) {\n//   for(let i = 0; i < count; i++) {\n//     let ah = rangedRandom(max, 10); \n//     console.log(ah); \n//   }\n// } ","import React, { useState, useEffect } from 'react';\nimport uniqid from \"uniqid\";\nimport {fetchPokemon, generateRandoms, newBoard} from \"./board_handler\";\n\nconst GameBoard = (props) => {\n    const [memory, setMemory] = useState([]);\n    const [randomPokes, setRandomPokes] = useState(generateRandoms(8, 700));\n\n    const [currentScore, setCurrentScore] = useState(0);\n    const [topScore, setTopScore] = useState(localStorage.getItem(\"topScore\") ? parseInt(localStorage.getItem(\"topScore\")) : 0);\n    \n    const evaluateClicked = (pokeId) => {\n        if(memory.includes(pokeId)) {\n            if(currentScore > topScore) {\n                localStorage.setItem(\"topScore\", memory.length);\n                setTopScore(parseInt(localStorage.getItem(\"topScore\")));\n            }\n            setCurrentScore(0);\n            setRandomPokes(generateRandoms(8, 700));    \n        }\n        else {\n            setMemory([...memory, pokeId]);\n            setCurrentScore(currentScore + 1);  \n            setRandomPokes(newBoard(memory, randomPokes));\n        }\n    }\n\n    return (\n        <div id=\"gameboard\">\n            <div id=\"scoreboard\" className=\"bold\">\n                <span>\n                    Current Score: {currentScore}\n                </span>\n                <span>\n                    Top Score: {topScore}\n                </span>\n            </div>\n            <CardPicker randomPokes={randomPokes} evaluateClicked={evaluateClicked}/>\n        </div>\n    )\n}\n\nconst CardPicker = (props) => {\n    const {randomPokes} = props;\n    \n    return (\n        <div id=\"card-picker\">\n            {randomPokes.map(pokeId => (\n                <PokeCard  pokeId={pokeId} key={uniqid()} evaluateClicked={props.evaluateClicked}/>\n            ))}\n        </div>\n    );\n}\n\nconst PokeCard = (props) => {\n    const [pokemon, setPokemon] = useState(undefined);\n    const [picked, setPicked] = useState(false);\n    const [isMounted, setIsMounted] = useState(false);\n\n    useEffect(() => {\n        setIsMounted(true);\n    }, []);\n\n    useEffect(() => {\n        const pokeUrl = `https://pokeapi.co/api/v2/pokemon/${props.pokeId}`;\n\n        if(isMounted) {\n            (async () => {\n                setPokemon(await fetchPokemon(pokeUrl));\n            })();\n        }\n\n        return () => {\n            setIsMounted(false);\n        }\n    }, [isMounted]);\n\n    const pickCard = () => {\n        setPicked(true);\n        props.evaluateClicked(props.pokeId);\n    }  \n\n    if(picked) {\n        return null;\n    } else {\n        return (\n            <div className=\"card\" onClick={pickCard}>\n                {pokemon &&\n                    <>\n                        <CardImage \n                            src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`} \n                            alt={pokemon.name} \n                        />\n                        <CardInfo pokeDetail={pokemon}/>\n                    </>\n                }\n            </div>\n        );\n    }\n}\n\nconst CardImage = (props) => {\n    return (\n        <div className=\"card-image\">\n            <img src={props.src} alt={props.alt}/>\n        </div>\n    );\n}\n\nconst CardInfo = (props) => {\n    const {id, name, types} = props.pokeDetail; \n\n    return (\n        <>  \n            <div className=\"card-id-name\">\n                <div className=\"card-name\">{name.toUpperCase()}</div>\n                <div className=\"card-id\">#{id}</div>\n            </div>\n            <div className=\"card-types\">\n                {types.map(e => (\n                    <span className={e.type.name} key={uniqid()}>{e.type.name}</span>\n                ))}\n            </div>\n        </>\n    );\n}\n\nexport default GameBoard;","import React from 'react';\nimport GameBoard from \"./components/GameBoard\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div id=\"title\" className=\"white bold\">Memory Card Game</div>\n      </header>\n      <div id=\"instruction\" className=\"white bold\">\n        <p>Get points by clicking on an image but don't click on any more than once!</p>\n      </div>\n      <GameBoard />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}