[{"/home/salmanrf/Web_Programming/theodinproject/memory_card/src/index.js":"1","/home/salmanrf/Web_Programming/theodinproject/memory_card/src/App.js":"2","/home/salmanrf/Web_Programming/theodinproject/memory_card/src/reportWebVitals.js":"3","/home/salmanrf/Web_Programming/theodinproject/memory_card/src/components/GameBoard.js":"4","/home/salmanrf/Web_Programming/theodinproject/memory_card/src/components/board_handler.js":"5"},{"size":535,"mtime":1609423243910,"results":"6","hashOfConfig":"7"},{"size":467,"mtime":1609580802342,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608992954000,"results":"9","hashOfConfig":"7"},{"size":3605,"mtime":1609597343882,"results":"10","hashOfConfig":"7"},{"size":1553,"mtime":1609596751255,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"4htlds",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/salmanrf/Web_Programming/theodinproject/memory_card/src/index.js",[],["24","25"],"/home/salmanrf/Web_Programming/theodinproject/memory_card/src/App.js",[],"/home/salmanrf/Web_Programming/theodinproject/memory_card/src/reportWebVitals.js",[],"/home/salmanrf/Web_Programming/theodinproject/memory_card/src/components/GameBoard.js",["26"],"import React, { useState, useEffect } from 'react';\nimport uniqid from \"uniqid\";\nimport {fetchPokemon, generateRandoms, newBoard} from \"./board_handler\";\n\nconst GameBoard = (props) => {\n    const [memory, setMemory] = useState([]);\n    const [randomPokes, setRandomPokes] = useState(generateRandoms(8, 700));\n\n    const [currentScore, setCurrentScore] = useState(0);\n    const [topScore, setTopScore] = useState(localStorage.getItem(\"topScore\") ? parseInt(localStorage.getItem(\"topScore\")) : 0);\n    \n    const evaluateClicked = (pokeId) => {\n        if(memory.includes(pokeId)) {\n            if(currentScore > topScore) {\n                localStorage.setItem(\"topScore\", memory.length);\n                setTopScore(parseInt(localStorage.getItem(\"topScore\")));\n            }\n            setCurrentScore(0);\n        }\n        else {\n            setMemory([...memory, pokeId]);\n            setCurrentScore(currentScore + 1);  \n        }\n        setRandomPokes(newBoard(memory, randomPokes));\n    }\n\n    return (\n        <div id=\"gameboard\">\n            <div id=\"scoreboard\" className=\"bold\">\n                <span>\n                    Current Score: {currentScore}\n                </span>\n                <span>\n                    Top Score: {topScore}\n                </span>\n            </div>\n            <CardPicker randomPokes={randomPokes} evaluateClicked={evaluateClicked}/>\n        </div>\n    )\n}\n\nconst CardPicker = (props) => {\n    const {randomPokes} = props;\n    \n    return (\n        <div id=\"card-picker\">\n            {randomPokes.map(pokeId => (\n                <PokeCard  pokeId={pokeId} key={uniqid()} evaluateClicked={props.evaluateClicked}/>\n            ))}\n        </div>\n    );\n}\n\nconst PokeCard = (props) => {\n    const [pokemon, setPokemon] = useState(undefined);\n    const [picked, setPicked] = useState(false);\n    const [isMounted, setIsMounted] = useState(false);\n\n    useEffect(() => {\n        setIsMounted(true);\n    }, []);\n\n    useEffect(() => {\n        const pokeUrl = `https://pokeapi.co/api/v2/pokemon/${props.pokeId}`;\n\n        if(isMounted) {\n            (async () => {\n                setPokemon(await fetchPokemon(pokeUrl));\n            })();\n        }\n\n        return () => {\n            setIsMounted(false);\n        }\n    }, [isMounted]);\n\n    const pickCard = () => {\n        setPicked(true);\n        props.evaluateClicked(props.pokeId);\n    }  \n\n    if(picked) {\n        return null;\n    } else {\n        return (\n            <div className=\"card\" onClick={pickCard}>\n                {pokemon &&\n                    <>\n                        <CardImage \n                            src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`} \n                            alt={pokemon.name} \n                        />\n                        <CardInfo pokeDetail={pokemon}/>\n                    </>\n                }\n            </div>\n        );\n    }\n}\n\nconst CardImage = (props) => {\n    return (\n        <div className=\"card-image\">\n            <img src={props.src} alt={props.alt}/>\n        </div>\n    );\n}\n\nconst CardInfo = (props) => {\n    const {id, name, types} = props.pokeDetail; \n\n    return (\n        <>  \n            <div className=\"card-id-name\">\n                <div className=\"card-name\">{name.toUpperCase()}</div>\n                <div className=\"card-id\">#{id}</div>\n            </div>\n            <div className=\"card-types\">\n                {types.map(e => (\n                    <span className={e.type.name} key={uniqid()}>{e.type.name}</span>\n                ))}\n            </div>\n        </>\n    );\n}\n\nexport default GameBoard;","/home/salmanrf/Web_Programming/theodinproject/memory_card/src/components/board_handler.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":75,"column":8,"nodeType":"33","endLine":75,"endColumn":19,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.pokeId'. Either include it or remove the dependency array.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [isMounted, props.pokeId]",{"range":"40","text":"41"},[2264,2275],"[isMounted, props.pokeId]"]